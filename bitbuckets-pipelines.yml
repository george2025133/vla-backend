image: gradle:7.6.4-jdk-focal

definitions:
  caches:
    node: ~/.npm
  services:
    docker:
      memory: 2048
  steps:
    - step: &code-check
        name: Code checking
        image: node:22-alpine
        caches:
          - node
        script:
          - echo "Installing dependencies..."
          - corepack enable
          - corepack prepare pnpm@latest-10 --activate
          - pnpm install --frozen-lockfile
          - echo "Running code checking"
          - cp .env.example .env
          - cat .env
          - pnpm typecheck
          - pnpm lint
          - pnpm build
    - step: &sonar
        name: Run SonarQube Analysis
        caches:
          - gradle
        script:
          - apt-get update && apt-get install -y wget unzip apt-transport-https curl software-properties-common
          - curl -sL https://deb.nodesource.com/setup_22.x | bash -
          - apt-get install nodejs
          - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
          - unzip sonar-scanner-cli-4.7.0.2747-linux.zip
          - mv sonar-scanner-4.7.0.2747-linux /opt/sonar-scanner
          - export PATH=$PATH:/opt/sonar-scanner/bin
          - sonar-scanner --version
          - sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.java.binaries=build/libs/ -Dsonar.java.libraries=build/libs/*.jar
    - step: &docker-build
        services:
          - docker
        caches:
          - gradle
        script:
                - apt-get update
                - apt-get install -y python3-pip
                - pip3 install awscli
                - aws --version
                - echo "Configuring AWS CLI..."
                - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_PRD
                - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_PRD
                - aws configure set region $AWS_REGION
                - echo "Logging in to Amazon ECR..."
                - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 818346694893.dkr.ecr.us-east-1.amazonaws.com
                - echo "Building Docker image..."
                - - docker build -t frontend --build-arg API_BASE_URL=$API_BASE_URL --build-arg MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN --no-cache --progress=plain .
                - echo "Tagging Docker image..."
                - docker tag catalog:latest $ECR_REGISTRY_PRD/$REPO_PRD:$TAG_PRD
                - echo "Pushing Docker image..."
                - docker push $ECR_REGISTRY_PRD/$REPO_PRD:$TAG_PRD

pipelines:
  pull-requests:
    "**":
      - parallel:
          steps:
            - step: *code-check
  branches:
    "main":
      - parallel:
          steps:
            - step: *code-check
      - step:
          <<: *docker-build
          deployment: production
          name: Build docker image and push to ECR PROD
    "dev":
      - parallel:
          steps:
            - step: *code-check
      - step:
          <<: *docker-build
          deployment: dev
          name: Build docker image and push to ECR DEV
    "qa":
      - parallel:
          steps:
            - step: *code-check
      - step:
          <<: *docker-build
          deployment: qa
          name: Build docker image and push to ECR QA





sqp_210b38e70f1424c263b9f1e596b420fc1cdb450f
pct-prd-api-frontend