image: gradle:7.6.4-jdk-focal

pipelines:
  branches:
    main:
      - step:
          name: Instalar dependencias y compilar con Maven
          script:
            - apt-get update && apt-get install -y wget unzip maven
            - mvn -v
            - mvn dependency:go-offline
            - mvn clean package -DskipTests
          artifacts:
            - target/*.jar

      - step:
          name: Ejecutar Tests con Maven
          image: maven:3.8.5-openjdk-17
          caches:
            - maven
          script:
            - mvn test
            - mvn surefire-report:report
            - find target/site/
          artifacts:
            - target/site/surefire-report.html

      - parallel:
          - step:
              name: Run SonarQube Analysis (Producciï¿½n)
              caches:
                - gradle
              script:
                - apt-get update && apt-get install -y wget unzip maven
                - mvn -v
                - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
                - unzip sonar-scanner-cli-4.7.0.2747-linux.zip
                - mv sonar-scanner-4.7.0.2747-linux /opt/sonar-scanner
                - export PATH=$PATH:/opt/sonar-scanner/bin
                - sonar-scanner --version
                - mvn clean package -DskipTests
                - sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY_PRD -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN_PRD -Dsonar.java.binaries=target/classes

          - step:
              name: OWASP Dependency Check
              script:
                - apt-get update && apt-get install -y curl unzip default-jre
                - curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v7.0.4/dependency-check-7.0.4-release.zip
                - unzip dependency-check.zip     
                - mkdir -p reports/
                - ./dependency-check/bin/dependency-check.sh --project "Catalog" --scan . --format "ALL" --out reports/
                - ls -lh reports/
              artifacts:
                - reports/**

          - step:
              name: TruffleHog Secret Scan
              image: python:3.10-slim
              script:
                - apt-get update && apt-get install -y python3 python3-pip git
                - pip3 install --upgrade pip
                - pip3 install trufflehog
                - trufflehog filesystem . --json > trufflehog-report.json || true
                - cat trufflehog-report.json
              artifacts:
                - trufflehog-report.json

      - step:
              name: Build JAR and Push to ECR(PRD)
              services:
                - docker
              deployment: Production 
              caches:
                - gradle
              script:
                - apt-get update
                - apt-get install -y python3-pip
                - pip3 install awscli
                - aws --version
                - echo "Configuring AWS CLI..."
                - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID_PRD
                - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY_PRD
                - aws configure set region $AWS_REGION
                - echo "Logging in to Amazon ECR..."
                - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 818346694893.dkr.ecr.us-east-1.amazonaws.com
                - echo "Building Docker image..."
                - docker build   -t catalog .
                - echo "Tagging Docker image..."
                - docker tag catalog:latest $ECR_REGISTRY_PRD/$REPO_PRD:$TAG_PRD
                - echo "Pushing Docker image..."
                - docker push $ECR_REGISTRY_PRD/$REPO_PRD:$TAG_PRD

        