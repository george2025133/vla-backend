const express = require('express');
const mysql = require('mysql');
const cors = require('cors');
const bodyParser = require('body-parser');
const AWS = require('aws-sdk');

const app = express();
const port = 5000;

app.use(cors());
app.use(bodyParser.json());


// Configurar AWS SDK
AWS.config.update({ region: process.env.AWS_REGION });
const s3 = new AWS.S3();

const BUCKET_NAME = process.env.S3_BUCKET_NAME;
const FILE_KEY = process.env.S3_FILE_KEY;

let dbConfig = {};

// Funci贸n para obtener las variables de conexi贸n desde S3
const getDbConfigFromS3 = async () => {
    try {
        const params = {
            Bucket: BUCKET_NAME,
            Key: FILE_KEY
        };
        const data = await s3.getObject(params).promise();
        dbConfig = JSON.parse(data.Body.toString());
    } catch (error) {
        console.error('Error fetching db config from S3:', error);
    }
};

/// Llamar a la funci贸n para obtener las variables de conexi贸n
getDbConfigFromS3().then(() => {
    const db = mysql.createConnection({
        //host: dbConfig.DB_HOST,
        //user: dbConfig.DB_USER,
        //password: dbConfig.DB_PASSWORD,
        //database: dbConfig.DB_NAME
        DB_HOST: process.env.DB_HOST,
        DB_USER: process.env.DB_USER,
        DB_PASSWORD: process.env.DB_PASSWORD,
        DB_NAME: process.env.DB_NAME,
    });

    db.connect((err) => {
        if (err) {
            throw err;
        }
        console.log('Conectado a la base de datos MySQL');
    });

// Endpoint para obtener datos
app.get('/api/data', (req, res) => {
    const sql = 'SELECT * FROM customer';
    db.query(sql, (err, results) => {
        if (err) {
            return res.status(500).send(err);
        }
        res.json(results);
    });
});

/// Endpoint para agregar datos
app.post('/api/customers', (req, res) => {
    const newCustomer = req.body;
    const sql = 'INSERT INTO customer (name, address, phone) VALUES (?, ?, ?)';
    db.query(sql, [newCustomer.name, newCustomer.address, newCustomer.phone], (err, result) => {
        if (err) {
            return res.status(500).send(err);
        }
        res.json({ id: result.insertId, ...newCustomer });
    });
});

app.listen(port, () => {
    console.log(`Servidor backend escuchando en http://localhost:${port}`);
  });
});


//docker build -t my-backend .
//docker run -p 5000:5000 --env-file .env my-backend